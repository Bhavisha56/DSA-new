Difficulty: MediumAccuracy: 33.0%Submissions: 308K+Points: 4
Given an array arr of non-negative integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Examples:

Input: arr[] = [2, 6, 1, 9, 4, 5, 3]
Output: 6
Explanation: The consecutive numbers here are 1, 2, 3, 4, 5, 6. These 6 numbers form the longest consecutive subsquence.
appraoch1 tc O(n^2) sc O(1)

class Solution {

    // Function to return length of longest subsequence of consecutive integers.
    boolean ls(int[] arr,int num){
        for(int i=0;i<arr.length;i++){
            if(arr[i]==num){
                return true;
            }
        }
        return false;
    }
    public int findLongestConseqSubseq(int[] arr) {
        // code here
    int longest=1;
    for(int i=0;i<arr.length;i++){
       int x=arr[i];
       int cnt=1;
       while(ls(arr,x+1)==true){
           x=x+1;
           cnt=cnt+1;
       }
        longest = Math.max(longest, cnt);
    }
    return longest;
    
    
    }
}
better approach tc O(nlogn) sc O(1)
class Solution {

    // Function to return length of longest subsequence of consecutive integers.
    public int findLongestConseqSubseq(int[] arr) {
        // code here
        Arrays.sort(arr);
        int cnt=1;
        int longest=1;
        int lastsmallest=Integer.MAX_VALUE;
        for(int i=0;i<arr.length;i++){
            if(arr[i]-1==lastsmallest){
                cnt=cnt+1;
                lastsmallest=arr[i];
            }else if(arr[i]!=lastsmallest){
                cnt=1;
                lastsmallest=arr[i];
            }
            longest=Math.max(longest,cnt);
        }
        return longest;
    }
}
optimal appraoch tc O(n) sc O1

class Solution {

    // Function to return length of longest subsequence of consecutive integers.
    public int findLongestConseqSubseq(int[] arr) {
        // code here
        int longest=1;
        HashSet<Integer> set=new HashSet<>();
        for(int i=0;i<arr.length;i++){
            set.add(arr[i]);
        }
       for(int it:set){
           if(!set.contains(it-1)){
               int cnt=1;
               int x=it;
               while(set.contains(x+1)){
                   x=x+1;
                   cnt=cnt+1;
               }
                 longest = Math.max(longest, cnt);
           }
       }
       return longest;
        
    }
}
