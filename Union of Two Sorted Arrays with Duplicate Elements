Difficulty: MediumAccuracy: 31.39%Submissions: 339K+Points: 4
Given two sorted arrays a[] and b[], where each array may contain duplicate elements , the task is to return the elements in the union of the two arrays in sorted order.

Union of two arrays can be defined as the set containing distinct common elements that are present in either of the arrays.
Examples:

Input: a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]
Output: 1 2 3 4 5 6 7
Explanation: Distinct elements including both the arrays are: 1 2 3 4 5 6 7.

apprach 1 
Time Compleixty : O( (m+n)log(m+n) ) . Inserting an element in a set takes logN time, where N is no of elements in the set. At max set can store m+n elements {when there are no common elements and elements in arr,arr2 are distntict}. So Inserting m+n th element takes log(m+n) time. Upon approximation across inserting all elements in worst, it would take O((m+n)log(m+n) time.

Using HashSet also takes the same time, On average insertion in unordered_set takes O(1) time but sorting the union vector takes O((m+n)log(m+n))  time. Because at max union vector can have m+n elements.

Space Complexity : O(m+n) {If Space of Union ArrayList is considered} 

O(1) {If Space of union ArrayList is not considered}
using hashset 
// a,b : the arrays
class Solution {
    // Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        // add your code here
         HashSet<Integer> set=new HashSet<>();
         for(int i=0;i<a.length;i++){
             set.add(a[i]);
         }
         for(int i=0;i<b.length;i++){
             set.add(b[i]);
         }
         
         ArrayList<Integer> li=new ArrayList<>(set);
         Collections.sort(li);
         return li;
         
    }
}

approach 2 two pointer
Time Complexity: O(m+n), Because at max i runs for n times and j runs for m times. When there are no common elements in arr1 and arr2 and all elements in arr1, arr2 are distinct. 

Space Complexity : O(m+n) {If Space of Union ArrayList is considered} 

O(1) {If Space of union ArrayList is not considered}

class Solution {
    // Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        int i = 0, j = 0;
        int n1 = a.length, n2 = b.length;
        ArrayList<Integer> li = new ArrayList<>();

        // Traverse both arrays
        while (i < n1 && j < n2) {
            // If current element of a[] is smaller
            if (a[i] < b[j]) {
                // Add to list if it's not a duplicate
                if (li.size() == 0 || li.get(li.size() - 1) != a[i]) {
                    li.add(a[i]);
                }
                i++;
            }
            // If current element of b[] is smaller
            else if (b[j] < a[i]) {
                // Add to list if it's not a duplicate
                if (li.size() == 0 || li.get(li.size() - 1) != b[j]) {
                    li.add(b[j]);
                }
                j++;
            }
            // If elements are equal, add any one and move both pointers
            else {
                if (li.size() == 0 || li.get(li.size() - 1) != a[i]) {
                    li.add(a[i]);
                }
                i++;
                j++;
            }
        }

        // Add remaining elements of a[]
        while (i < n1) {
            if (li.size() == 0 || li.get(li.size() - 1) != a[i]) {
                li.add(a[i]);
            }
            i++;
        }

        // Add remaining elements of b[]
        while (j < n2) {
            if (li.size() == 0 || li.get(li.size() - 1) != b[j]) {
                li.add(b[j]);
            }
            j++;
        }

        return li;
    }
}
