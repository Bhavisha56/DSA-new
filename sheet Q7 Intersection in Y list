Intersection in Y Shaped Lists
Difficulty: MediumAccuracy: 44.67%Submissions: 295K+Points: 4
Given the head of two singly linked lists, return the point where these two linked lists intersect.

Note: It is guaranteed that the intersected node always exists.

Examples:

Input: head1[] : 4->4->4->4->4, head2[] : 4->4->4

Brute Approach using hashset tc O(n+m) sc O(n)
import java.util.HashSet;

class Intersect {
    // Function to find intersection point in Y shaped Linked Lists.
    static Node intersectPoint(Node head1, Node head2) {
        // Use a HashSet to store visited nodes from the first linked list
        HashSet<Node> visitedNodes = new HashSet<>();

        // Traverse the first linked list and add each node to the HashSet
        Node temp1 = head1;
        while (temp1 != null) {
            visitedNodes.add(temp1);
            temp1 = temp1.next;
        }

        // Traverse the second linked list and check for intersection
        Node temp2 = head2;
        while (temp2 != null) {
            if (visitedNodes.contains(temp2)) {
                return temp2; // Intersection point found
            }
            temp2 = temp2.next;
        }

        // If no intersection point is found, return null
        return null;
    }
}


optimal approach tcO(n+M) scO(1)
cutting the length of longest headd1 so that the head1 and head2 come on the same line of tree
code
class Intersect {
     static Node slow;
     static Node fast;
    // Function to find intersection point in Y shaped Linked Lists.
    static Node intersectPoint(Node head1, Node head2) {
        // code here
        int cnt1=0;
        int cnt2=0;
        Node temp1=head1;
        Node temp2=head2;
        while(temp1!=null){
            cnt1++;
            temp1=temp1.next;
        }
         while(temp2!=null){
            cnt2++;
            temp2=temp2.next;
        }

      
        if(cnt1>=cnt2){
           int diff1=cnt1-cnt2;
           while(diff1!=0){
               head1=head1.next;
               diff1--;
           }
        }else{
             int diff2=cnt2-cnt1;
           while(diff2!=0){
               head2=head2.next;
               diff2--;
           }
        }
        
       while(head1!=null && head2!=null){
           if(head1==head2){
               return head1;
           }
           head1=head1.next;
           head2=head2.next;
           
       }
       return null;
    }
}

