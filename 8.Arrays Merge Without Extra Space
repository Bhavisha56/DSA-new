Difficulty: MediumAccuracy: 32.01%Submissions: 280K+Points: 4
Given two sorted arrays a[] and b[] of size n and m respectively, the task is to merge them in sorted order without using any extra space. Modify a[] so that it contains the first n elements and modify b[] so that it contains the last m elements.

Examples:

Input: a[] = [2, 4, 7, 10], b[] = [2, 3]
Output:
2 2 3 4
7 10
Explanation: After merging the two non-decreasing arrays, we get, 2 2 3 4 7 10

brute force  tc O(N) sc O(n) just copying element from here there
class Solution {
    // Function to merge the arrays.
    public void mergeArrays(int a[], int b[]) {
        // code here
        // ArrayList<Integer> li=new ArrayList<>();
       // Create a new array to store the merged result
       int n=a.length;
       int m=b.length;
     ArrayList<Integer> li=new ArrayList<>();
     for(int i=0;i<n;i++){
         li.add(a[i]);
     }
     for(int i=0;i<m;i++){
         li.add(b[i]);
     }
     Collections.sort(li);
     
     for(int i=0;i<n;i++){
         a[i]=li.get(i);
     }
     for (int i = 0; i < m; i++) {
            b[i] = li.get(n + i);
        }
    
      
    }
}

optimize tc o(nlogn) sc O(1)

class Solution {
    // Function to merge the arrays.
    public void mergeArrays(int a[], int b[]) {
        // code here
       int n=a.length;
       int m=b.length;
      int i=n-1;
      int j=0;
      while(i>=0&&j<m){
          if(a[i]>b[j]){
              int temp=a[i];
              a[i]=b[j];
              b[j]=temp;
          }
          i--;
          j++;
      }
      Arrays.sort(a);
      Arrays.sort(b);
      
    }
}
