using brute appraoch O(n*m*nlogn) sc O(n)
code
class Solution {
    // Function to flatten a linked list
    Node flatten(Node root) {
        if (root == null || root.next == null) {
            return root; // Base case
        }

        Node curr = root;

        // Flatten the linked list by appending the `next` chain to the `bottom` chain
        while (curr.next != null) {
            Node temp = curr;

            // Move to the last node in the `bottom` chain of the current node
            while (temp.bottom != null) {
                temp = temp.bottom;
            }

            // Append the next list to the bottom of the current node
            temp.bottom = curr.next;

            // Move to the next node in the `next` chain
            curr.next = curr.next.next;
        }

        // Sort the entire list
        return sort(root);
    }

    // Function to sort the flattened linked list
    public static Node sort(Node head) {
        ArrayList<Integer> values = new ArrayList<>();
        Node temp = head;

        // Step 1: Collect all values
        while (temp != null) {
            values.add(temp.data);
            temp = temp.bottom;
        }

        // Step 2: Sort the values
        Collections.sort(values);

        // Step 3: Reconstruct the sorted list
        temp = head;
        for (int value : values) {
            temp.data = value;
            temp = temp.bottom;
        }

        return head;
    }
}
optimal appraoch Flattening a Linked List using Priority Queues â€“ O(n * m * log(n)) Time and O(n) Space
class Solution {
    // Function to flatten a linked list
   class NodeComparator implements java.util.Comparator<Node> {
      @Override
    public int compare(Node a, Node b) {
        return Integer.compare(a.data, b.data);
    }
}
    Node flatten(Node root) {
        // code here
        PriorityQueue<Node> pq=new PriorityQueue<>(new NodeComparator());
        
        Node head=null;
        Node tail=null;
        
        while(root!=null){
            pq.add(root);
            root=root.next;
        }
        while(!pq.isEmpty()){
            Node minhead=pq.poll();
            if(head==null){
                head=minhead;
                tail=minhead;
            }else{
                tail.bottom=minhead;
                tail=tail.bottom;
            }
            
            if(minhead.bottom!=null){
                pq.add(minhead.bottom);
                minhead.bottom=null;
            }
        }
        return head;
        
    }
}
