Given two integers a and b, write a function lcmAndGcd() to compute their LCM and GCD. The function takes two integers a and b as input and returns a list containing their LCM and GCD.

Example 1:

Input: a = 5 , b = 10
Output: 10 5
Explanation: LCM of 5 and 10 is 10, while their GCD is 5.

appraoch 1 
to find lcm using LCM=(math.abs(a*b)/gcd(a,b)) and to find gcd see the below one GCD func
tc O(min(a,b)) sc O(1)
class Solution {
    static int GCD(Long A , Long B){
        long loop=0;
        if(A>B){
            loop=A;
        }else{
            loop=B;
        }
        for(int i=2;i<=loop;i++){
            if((A%i==0) && (B%i==0)){
                return i;
            }
        }
        return 1;
    }
    static Long[] lcmAndGcd(Long A , Long B) {
        // code here
        Long []arr=new Long[2];
        long gcd=GCD(A , B);
        long lcm=Math.abs(A*B)/gcd;
        arr[0]=lcm;
        arr[1]=gcd;
        return arr;
    }
};

optimal approach 2 using euclidean algo                                          GCD(r2,r1)
                                                                                 quotient|r1|r2|remiander
                                                                                      |r2|remainder|
class Solution {
    static long GCD(Long A , Long B){
         while (B != 0) {
            long temp = B;
            B = A % B;
            A = temp;
        }
        return A;
    }
    static Long[] lcmAndGcd(Long A , Long B) {
        // code here
        Long []arr=new Long[2];
        long gcd=GCD(A , B);
        long lcm=Math.abs(A*B)/gcd;
        arr[0]=lcm;
        arr[1]=gcd;
        return arr;
    }
};tc O(logMIN(a,b)) sc O(1)
