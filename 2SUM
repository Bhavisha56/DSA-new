approach 1 using 2 for loops 
tc O(n^2) sc O(1)


// User function Template for Java

class Solution {
    boolean twoSum(int arr[], int target) {
        // code here
        for(int i=0;i<arr.length;i++){
            int sum=0;
            for(int j=i+1;j<arr.length;j++){
                sum+=arr[i]+arr[j];
                if(sum==target){
                    return true;
                }else{
                    sum=0;
                }
            }
        }
        return false;
    }
}

approach 2 using hashset O(n) sc O(n)

class Solution {
    boolean twoSum(int arr[], int target) {
        // code here
       Set<Integer> seen = new HashSet<>();
        for (int num : arr) {
            int complement = target - num;
            if (seen.contains(complement)) {
                return true;
            }
            seen.add(num);
        }
     return false;
    }
}
