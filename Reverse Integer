
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321

approach tc O(n) sc O(n)
class Solution {
    public int reverse(int x) {
        int sign = (x < 0) ? -1 : 1; 
        
        String s = Integer.toString(Math.abs(x));
        
         String reversed = new StringBuilder(s).reverse().toString();
        
        int res;
        try {
           
            res = Integer.parseInt(reversed);
        } catch (NumberFormatException e) {
                      return 0;
        }
        return res * sign;
    }
}

approach tc O(log10(n)+1) sc O(1)
        // Initialize a variable 'revNum' to
        // store the reverse of the input integer.
        int revNum = 0;
        // Start a while loop to reverse the
        // digits of the input integer.
        while(n > 0){
            // Extract the last digit of
            // 'n' and store it in 'ld'.
            int ld = n % 10;
            // Multiply the current reverse number
            // by 10 and add the last digit.
            revNum = (revNum * 10) + ld;
            // Remove the last digit from 'n'.
            n = n / 10;
        }
        // Print the reversed number.
        System.out.println(revNum);



