public class tUf { tc O(n) sc(ON)
    public static int[] moveZeros(int n, int []a) {
        //temporary array:
        ArrayList<Integer> temp = new ArrayList<>();
        //copy non-zero elements
        //from original -> temp array:
        for (int i = 0; i < n; i++) {
            if (a[i] != 0)
                temp.add(a[i]);
        }

        // number of non-zero elements.
        int nz = temp.size();

        //copy elements from temp
        //fill first nz fields of
        //original array:
        for (int i = 0; i < nz; i++) {
            a[i] = temp.get(i);
        }

        //fill rest of the cells with 0:
        for (int i = nz; i < n; i++) {
            a[i] = 0;
        }
        return a;
    }



optimal solution tc O(n) sc O(1)
// User function Template for Java

class Solution {
   
    void pushZerosToEnd(int[] arr) {
        // code here
      int n=arr.length;
      int i=0;
      int j=0;
   for(int k=0;k<n;k++){
       if(arr[i]==0 && arr[j]==0){
           j++;
       }else if(arr[i]!=0 && arr[j]!=0){
           i++;j++;
       }else{
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j++;
        
       }
   }
     
    }
}
