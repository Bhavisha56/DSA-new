TC O(NLOGN) SC O(N)
class Solution {
    void merge(int arr[], int l, int mid, int r) {
        // Temporary array to store merged elements
        int[] b = new int[r - l + 1];
        int i = l;       // Starting index for the left subarray
        int j = mid + 1; // Starting index for the right subarray
        int k = 0;       // Starting index for the merged array

        // Merge elements from both halves into the temporary array
        while (i <= mid && j <= r) {
            if (arr[i] <= arr[j]) {
                b[k++] = arr[i++];
            } else {
                b[k++] = arr[j++];
            }
        }

        // Copy any remaining elements from the left subarray
        while (i <= mid) {
            b[k++] = arr[i++];
        }

        // Copy any remaining elements from the right subarray
        while (j <= r) {
            b[k++] = arr[j++];
        }

        // Copy sorted elements back to the original array
        for (int p = 0; p < b.length; p++) {
            arr[l + p] = b[p];
        }
    }

    void mergeSort(int arr[], int l, int r) {
        // Only perform sorting if l < r
        if (l < r) {
            int mid = l + (r - l) / 2; // Find the middle index
            mergeSort(arr, l, mid);    // Sort the left half
            mergeSort(arr, mid + 1, r);// Sort the right half
            merge(arr, l, mid, r);     // Merge the sorted halves
        }
    }
}
